/*
 * rs-project-startup
 *
 * A framework for quickly starting a Rust project
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use super::super::models;

/// RegisterReq : User registration request body
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RegisterReq {
    /// External account unique identifier
    #[serde(rename = "auth_id")]
    pub auth_id: String,
    /// Authentication credentials
    #[serde(rename = "auth_token")]
    pub auth_token: String,
    /// Authentication method username: auth_id is username, auth_token is password
    #[serde(rename = "auth_type")]
    pub auth_type: models::AuthType,
    /// User description information, default is empty
    #[serde(rename = "desc", skip_serializing_if = "Option::is_none")]
    pub desc: Option<String>,
    /// User nickname, auto-generated if not provided
    #[serde(rename = "nickname", skip_serializing_if = "Option::is_none")]
    pub nickname: Option<String>,
    /// Target role
    #[serde(rename = "role")]
    pub role: models::Role,
}

impl RegisterReq {
    /// User registration request body
    pub fn new(
        auth_id: String,
        auth_token: String,
        auth_type: models::AuthType,
        role: models::Role,
    ) -> RegisterReq {
        RegisterReq {
            auth_id,
            auth_token,
            auth_type,
            desc: None,
            nickname: None,
            role,
        }
    }
}
