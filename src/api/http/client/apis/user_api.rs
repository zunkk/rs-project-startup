/*
 * rs-project-startup
 *
 * A framework for quickly starting a Rust project
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};

use super::super::models;
use super::{ContentType, Error, ResponseContent, configuration};

/// struct for passing parameters to the method [`user_login`]
#[derive(Clone, Debug)]
pub struct UserLoginParams {
    /// Authentication method username: auth_id is username, auth_token is password
    pub auth_type: models::AuthType,
    /// External account unique identifier
    pub auth_id: String,
    /// Authentication credentials
    pub auth_token: String,
}

/// struct for passing parameters to the method [`user_register`]
#[derive(Clone, Debug)]
pub struct UserRegisterParams {
    pub register_req: models::RegisterReq,
}

/// struct for typed errors of method [`user_login`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UserLoginError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`user_refresh_token`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UserRefreshTokenError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`user_register`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UserRegisterError {
    UnknownValue(serde_json::Value),
}

/// Verify account credentials and return a usable JWT access token.
pub async fn user_login(
    configuration: &configuration::Configuration,
    params: UserLoginParams,
) -> Result<models::ResponseLoginRes, Error<UserLoginError>> {
    let uri_str = format!("{}/api/v1/user/login", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("auth_type", &params.auth_type.to_string())]);
    req_builder = req_builder.query(&[("auth_id", &params.auth_id.to_string())]);
    req_builder = req_builder.query(&[("auth_token", &params.auth_token.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => {
                return Err(Error::from(serde_json::Error::custom(
                    "Received `text/plain` content type response that cannot be converted to `models::ResponseLoginRes`",
                )));
            }
            ContentType::Unsupported(unknown_type) => {
                return Err(Error::from(serde_json::Error::custom(format!(
                    "Received `{unknown_type}` content type response that cannot be converted to `models::ResponseLoginRes`"
                ))));
            }
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UserLoginError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// User logs in with a valid JWT token and returns a new JWT access token.
pub async fn user_refresh_token(
    configuration: &configuration::Configuration,
) -> Result<models::ResponseRefreshTokenRes, Error<UserRefreshTokenError>> {
    let uri_str = format!("{}/api/v1/user/refresh-token", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => {
                return Err(Error::from(serde_json::Error::custom(
                    "Received `text/plain` content type response that cannot be converted to `models::ResponseRefreshTokenRes`",
                )));
            }
            ContentType::Unsupported(unknown_type) => {
                return Err(Error::from(serde_json::Error::custom(format!(
                    "Received `{unknown_type}` content type response that cannot be converted to `models::ResponseRefreshTokenRes`"
                ))));
            }
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UserRefreshTokenError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Create a new user with the specified role and return the user unique identifier.
pub async fn user_register(
    configuration: &configuration::Configuration,
    params: UserRegisterParams,
) -> Result<models::ResponseRegisterRes, Error<UserRegisterError>> {
    let uri_str = format!("{}/api/v1/user/register", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&params.register_req);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => {
                return Err(Error::from(serde_json::Error::custom(
                    "Received `text/plain` content type response that cannot be converted to `models::ResponseRegisterRes`",
                )));
            }
            ContentType::Unsupported(unknown_type) => {
                return Err(Error::from(serde_json::Error::custom(format!(
                    "Received `{unknown_type}` content type response that cannot be converted to `models::ResponseRegisterRes`"
                ))));
            }
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UserRegisterError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
